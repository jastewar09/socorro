#!/usr/bin/perl

#
# Usage: 
#
#  f90makedep.p  source-files
#
# Output: make.dep
#

#
# This generates a makefile fragment with a dependency list generated
# from a list of fortran 90 source files.
#

#
# This script is modified from a script originally written by
# Michael Wester <wester@math.unm.edu> February 16, 1995
#   Cotopaxi (Consulting), Albuquerque, New Mexico
# and modified by Alan Tackett for Socorro. Subsequent mods
# by Mark Sears (Sandia National Labs).
#



#Open the new Makefile
open(MAKEFILE, "> Makefile.depends");

printf MAKEFILE "# Fortran 90 dependency list generated by f90makedep.pl\n";

# list of source files to scan
@srcs = @ARGV;

#
# Dependency listing
#
&MakeDependsf90();

#
# &MakeDependsf90(f90 compiler); --- FORTRAN 90 dependency maker
#
sub MakeDependsf90 {
   local(@files) = @srcs;
   local(@dependencies);
   local(%filename);
   local(@incs);
   local(@modules);
   local($objfile);

   #
   # Associate each module with the name of the file that contains it
   #
   foreach $file (grep(/.*\.F90|.*\.F/, @files)) {
      open(FILE, $file) || warn "Cannot open $file: $!\n";
      while (<FILE>) {
         /^\s*module\s+([^\s!]+)/i &&
	   ($filename{&toLower($1)} = $file) =~ s/\.F90$|\.F$/.o/;
       }
      }

   #
   # Print the dependencies of each file that has one or more include's or
   # references one or more modules
   #
   foreach $file (grep(/.*\.F90|.*\.F/, @files)) {
      open(FILE, $file);
      while (<FILE>) {
         /^\s*include\s+["\']([^"\']+)["\']/i && push(@incs, $1);
         /^\s*use\s+([^\s,!]+)/i && push(@modules, &toLower($1));
         }

#print "FILE=$file\n";
#print "  modules=@modules\n";

#     if (defined @incs || defined @modules) {
      if ( @incs || @modules) {
         ($objfile = $file) =~ s/\.F90$|\.F$/.o/;
         print MAKEFILE "$objfile: ";
         undef @dependencies;
         foreach $module (@modules) {
            push(@dependencies, $filename{$module});
            }
         @dependencies = &uniq(sort(@dependencies));
         local(@dep); 
         foreach $d (@dependencies) {

              { push(@dep, $d); }
         } 

         # only list local includes as depends
         local(@localincs); 
         foreach $f (grep(/.*\.h|.*\.inc/, @incs)) {
            foreach $s (@srcs) {
             if ($f =~ $s) { print "F=",$f, " * S=",$s, "\n"; push(@localincs, $f); }
            }
         }  
         &PrintWords(length($objfile) + 2, 0,
                     @dep, &uniq(sort(@localincs)));
         undef(@dep);
         print MAKEFILE "\n";

         undef @incs;
         undef @localincs;
         undef @modules;
        }
      }
   }

#
# &PrintWords(current output column, extra tab?, word list); --- print words
#    nicely
#
sub PrintWords {
   local($columns) = 78 - shift(@_);
   local($extratab) = shift(@_);
   local($wordlength);
   #
   print MAKEFILE @_[0];
   $columns -= length(shift(@_));
   foreach $word (@_) {
      $wordlength = length($word);
      if ($wordlength + 1 < $columns) {
         print MAKEFILE " $word";
         $columns -= $wordlength + 1;
         }
      else {
         #
         # Continue onto a new line
         #
         if ($extratab) {
            print MAKEFILE " \\\n\t\t$word";
            $columns = 62 - $wordlength;
            }
         else {
            print MAKEFILE " \\\n\t$word";
            $columns = 70 - $wordlength;
            }
         }
      }
   }

#
# &toLower(string); --- convert string into lower case
#
sub toLower {
   local($string) = @_[0];
   $string =~ tr/A-Z/a-z/;
   $string;
   }

#
# &uniq(sorted word list); --- remove adjacent duplicate words
#
sub uniq {
   local(@words);
   foreach $word (@_) {
      if ($word ne $words[$#words]) {
         push(@words, $word);
         }
      }
   @words;
   }

#
